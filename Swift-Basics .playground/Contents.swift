import UIKit
import Darwin
import Foundation

//Variables
var greeting = "Hello, playground"
print(greeting)

var firstname = "Jay"
print(firstname)

var a = 200
print(a)
a = 150
print(a)
let b = 650
print(b)

let ab:Int8 = Int8.min
let abb:Int8 = Int8.max-1
print(ab,abb)

//DataTypes
var anInteger:Int = 50
var anFloat = 52.0
var anDouble = 20.0
var anString:String = "Tom"
var anBool:Bool = true
print(anInteger,anFloat,anDouble,anBool,anString)

//Assignment Operator
var a1 = 25
var b2 = 20
var c = 5
b2 = a1
print(b2)
var (x,y) = (1,2.0)
y=5.6
print(x,y)

//Arithmatic Operator
print(a1+b2)
print(a1-b2)
print(a1*b2)
print(a1/b2)
print(a1*b2/c)
pow(2.0,6.0)
ceil(y)
floor(y)


let http404Error = (404,"Not Found")
let (statusCode,NatureofError) = http404Error
print("\(statusCode) & \(NatureofError)")
print("Autogenerated Status Code is \(http404Error.0)")  //we can acces it by .0 and .1
//Unary Operator
let three = 3
let minusThree = -three
let plusthree = -minusThree

//Relational Operator
print(a1==b2)
print(a1<b2)
print(a1>b2)
print(a1 != b2)
print(a1>=b2)
print(a1<=b2)

//ternary Operator
let h = 40
let head = false
let new = h + (head ? 50 : 23)

//Logical Operator
let allowedEntry = false
if allowedEntry{
    print("Acces given")
}else{
    print("No Access")
}

let abc = true
let pqr = false
if abc && pqr{
    print("both")
}else{
    print("Not both present")
}

if abc || pqr{
    print("Any one is true")
}else{
    print("Bioth are false")
}

var deafultcolor="red"
var userDefinedColorName: String?
var color = userDefinedColorName ?? deafultcolor

//closed range operator
var newStr = ["Anna", "Alex", "Brian", "Jack"]
for i in 1...5{
    print("\(i) times 5 is \(i * 5)")
}
for name123 in newStr[2...] {
    print(name123)
}
for name in newStr[..<2]{
    print(name)
}
//Collection  Types
//Array

var abc1:[Int]=[]
print("abc1 \(abc1.count)")
abc1.append(6)
abc1=[]
//creating by default value
var pqr1:[Double] = Array(repeating: 0.0, count: 5)
var xyz1 = Array(repeating: 2.5, count: 1)
var abc2 = pqr1+xyz1
if abc2.isEmpty {
    print("The array is empty")
} else {
    print("The array is not empty.")
}

abc2.append(6)
abc2.count

var new1 = ["a1","a2","a3","a4"]
new1 += ["a5"]
new1[0] = "ab1"
print(new1[0])
print(new1)
new1.insert("pq1", at: 0)
let mno = new1.remove(at: 0)
new1.removeLast()
//iterating a value
for e in new1{
    print(e)
}

//Set

var favGen: Set<String> = ["Rock","Classical"]
var inFavGen:Set = [2,3,4,5]
favGen.count
if favGen.isEmpty {
    print("The Set is empty")
} else {
    print("The set is not empty.")
}
if favGen.contains("Rocky") {
    print("Rocky is there")
} else {
    print("Rocky is not there")
}
for f1 in favGen.sorted(){
    print("\(f1)")
}

let oddDig:Set = [1,3,5,7,9]
var evenDig:Set = [2,4,6,8]
print(oddDig)
oddDig.union(evenDig).sorted()
oddDig.intersection(inFavGen).sorted()
oddDig.isSubset(of: evenDig)

//Dictionaries

var namesOfInteger:[Int:String] = [:]
namesOfInteger[3] = "Three"
var airports = [1:"bom",2:"Chen"]
print(airports)
airports.count
if airports.isEmpty {
    print("The airport is empty")
} else {
    print("The airport is not empty.")
}
airports[3] = "Del"
print( airports[3] ?? "")
if let oldvalue = airports.updateValue("Assam", forKey: 3) {
    print("The airport name was \(oldvalue). ")
} else {
    print("The set is not empty.")
}
airports[4] = "Apl"
//airports[4] = nil
print(airports)
for airportCode in airports.keys {
    print("code: \(airportCode)")
}
for airportName in airports.values {
    print("Values: \(airportName)")
}

//Control Loop
//for in loop

let name=["Jay","vishal","Simform"]
for z in name{
    print("Hello, \(z)")
}

let numOfLegs=["Spider":8 , "ant": 6]
for (animalName, legCount) in numOfLegs{
    print("\(animalName) has \(legCount)")
}
let minutes = 60
let minute=5
for tickmark in stride(from: 0, to: minutes, by:  minute  ){
  print(tickmark)
}

//while Loop
var counter = 5
while counter>0{
    print("Hello")
    counter -= 1
}
var counter2 = 6
repeat{
    print("hellon world")
    counter2 -= 3
}while counter2>2

//Switch Case
let character: Character = "c"
switch character {
case "a", "A":
    print("The letter A")
default:
    print("Not the letter A")
}

let approxCount = 45
let countedthings = "moon is orbiting"
let naturalCount : String
switch approxCount{
case 0:
    naturalCount = "No"
case 1..<30:
    naturalCount = "More"
case 31..<50:
    naturalCount = "Dozen"
default:naturalCount = "many"
    
}
print("\(naturalCount)")

//function

func greet(person: String) -> String {
    return "Hello again, " + person + "!"
}
print(greet(person: "Jay"))
// Prints "Hello again, Anna!"

//function without parameter
func sayHelloWorld() -> String {
    return "Hello jay again"
}
print(sayHelloWorld())
// Prints "Hello again, Anna!"

func swap(_ a: inout Int, _ b: inout Int) {
    let temporaryA = a
    a = b
    b = temporaryA
}
var someInt = 3
var anotherInt = 73
swap(&someInt, &anotherInt)
print("I am Swapping the values\(someInt) and \(anotherInt)")

//function Type
func addTwoInt(_ a: Int,_ b: Int)->Int{
    return a+b
}
func multTwoInt(_ a:Int,_ b:Int)->Int{
    return a*b
}
var mathfunction:(Int,Int)->Int = addTwoInt
print("mathfunction is \(mathfunction(2,3)) ")
mathfunction = multTwoInt
print("multiply two Int is \(mathfunction(1,3))")


//function with parameter
func stepFor(_ input: Int) -> Int {
    return input + 1
}
func stepBack(_ input: Int) -> Int {
    return input - 1
}
func chooseYourStep(backward:Bool)->(Int)->Int{
    return backward ? stepBack(_:) :stepFor(_:)
}
var currentVal = 3
let moveNearerToZero = chooseYourStep(backward: currentVal>0)
print("heading to zero")
while currentVal != 0{
    print("\(currentVal)...")
    currentVal = moveNearerToZero(currentVal)
}
print("Zero!")

//Closures
let simpleClosure:(String) -> () = { name in
    print(name)
}
simpleClosure("Hello JavaTpoint")

var myfunction:((Int)->Bool) = {number in
    if number > 3{
        return true
    }else{
        return false
    }
}
myfunction(9)

let newClosure:((String) -> String) = { name in
    let greeting = "Hello JavaTpoint " + "A platform for all technologies" + " \(name)"
    return greeting
}
let result = newClosure("Hello Jay")
print(result)

var customersInLine = ["Cherry", "Aam", "Kiwi", "Apple", "Bannaa"]
print(customersInLine.count)
let customerProvide = {customersInLine.remove(at: 2)}
print(customersInLine.count)

print("Now Serving \(customerProvide())")
print(customersInLine.count)

//enumeration
enum Planet{
    case earth,mars,mercury,venus
}
let somePlanet = Planet.mars
switch somePlanet {
case .venus:
    print("Mostly harmless")
default:
    print("Not a safe place for humans")
}

enum Bever : CaseIterable{
    case coffee,tea,juices
}
let numberOfChoice = Bever.allCases.count
print(numberOfChoice)

for berverage in Bever.allCases{
    print(berverage)
}
 indirect enum ArExp {
    case num(Int)
    case add(ArExp,ArExp,ArExp)
    case multi(ArExp,ArExp)
}
let five = ArExp.num(5)
let six = ArExp.num(6)
let sum = ArExp.add(five, six, six)
let mult = ArExp.multi(five, six)
print("\(mult)")

//Structure

struct Amount{
    var rupee:Int
    var paisa:Double
}
var xy = Amount(rupee: 5, paisa: 0.58)
print(xy)
print("Number of rupee is \(xy.rupee)")
print("Number of paisa is \(xy.paisa)")

struct Resolution{
    var width = 0
    var height = 0
}
class VideoMode{
    var resolution = Resolution()
    var framerate = 0.0
    var name: String?
}
let someResolution = Resolution()
let someVideomode = VideoMode()
print("\(someVideomode.resolution.width)")
someVideomode.resolution.width = 2180
print("\(someVideomode.resolution.width)")

let hd = Resolution(width: 5, height: 8)
var cinema = hd
cinema.width = 1980
print("\(cinema.width),\(cinema.height)")
print("\(hd.self)")

class EmpSalary {
   var salary = 10000
}
let Income = EmpSalary()
print("Employee salary is \(Income.salary)")

//Properties
struct FixedRange {
    var firstValue: Int
    let length: Int
}
var rangeOfThreeItems = FixedRange(firstValue: 0, length: 5)
print("\(rangeOfThreeItems)")
rangeOfThreeItems.firstValue = 8

class DataImporter {
    
    var filename = "data.txt"
    }
class DataManager{
    lazy var importer = DataImporter()
        var data:[String] = []
     
}
let manager = DataManager()
manager.data.append("New Data")
manager.data.append("Some More Data")
print(manager.data)
print(manager.importer.filename)

//Subscript
class daysofaweek {
   var days = ["Sunday", "Monday", "Tuesday", "Wednesday",
      "Thursday", "Friday", "Saturday"]
   subscript(index: Int) -> String {
      get {
         return days[index]
      }
      set(newValue) {
         self.days[index] = newValue
      }
   }
}
var p = daysofaweek()
print(p[0])
print(p[1])
print(p[2])
print(p[3])
print(p[4])
print(p[5])
print(p[6])
p[0] = "No Week of Day"
print(p[0])

//If let
var optionalNumber : Int?
//optionalNumber = 26
if let number = optionalNumber{
    print("I have a number \(number)")
}else{
    print("I Don't have Number")
}

//Guard let
func tripleNumber(number :Int?){
    guard let num = number else {
        print("Exiting from the Function")
        return
    }
    print("My triple Number \(num*3)")
    
    }
tripleNumber(number: optionalNumber)

//set
struct Person2:Hashable{
    var age:Int
    var name:String
    }
let objPersonSet: Set<Person2> = [Person2(age: 23, name: "Jay"),Person2(age: 24, name: "Dhruv")]
for name23 in objPersonSet {
    print(name23)
}

//type Casting
class Subjects{
    var physics:String
    init(physics:String){
        self.physics = physics
    }
}
class Chem : Subjects{
    var eqauations:String
    init(eqauations:String ,physics: String) {
        self.eqauations = eqauations
        super.init(physics: "Jay")
    }
}
class Math : Subjects{
    var formula:String
    init(physics: String,formula :String) {
        self.formula = formula
        super.init(physics: physics)
    }
}

let sa = [Chem(eqauations: "H2SO4", physics: "Mechanics")]

//Optional Binding and Optional Chaining
var possibleNumber = "123"

if let actualNumber = Int(possibleNumber) {
    print("The string \"\(possibleNumber)\" has an integer value of \(actualNumber)")
} else {
    print("The string \"\(possibleNumber)\" couldn't be converted to an integer")
}


struct Parts{
    var name:String
    var price : Int?
}
class ComputerParts{
    
    func findParts(name:String) -> Parts? {
        if name == "Keyboard" {
            return Parts (name : "Some Keyboard",price: 800)
        }
        else if name == "mouse"{
            return Parts (name : "Some Mouse" , price : nil)
        }
        return nil
    }
}
let objComputerParts = ComputerParts()
//if let parts = objComputerParts.findParts(name: "Keyboard"){
//    if let partPrice = parts.price{
//        print("it is there")
//    }
//}

if let partPrice = objComputerParts.findParts(name: "mouse")?.price{
    var count2 :Int? = 50
    var count1 = partPrice + 1
    print("it is there \(count1)")
}else{
    print("I am Here")
}
    
var array = [1,2,3,4,5]
//for i in array[..<3]{
//    print(i)
//}
var abc123 = "Simform solutions at Ahemdabad"
var array123 = Array(abc123)
print(array123)
var str34:String = ""
var array23: [String] = []

for i in array123{
    if i != " "{
        str34.append(i)
    }else{
        array23.append(str34)
        str34 = ""
    }
    //var newarray = []
    
}
print(array23)
